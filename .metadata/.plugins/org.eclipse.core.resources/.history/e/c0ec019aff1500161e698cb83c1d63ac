package cons;

import java.awt.List;
import java.awt.PageAttributes.MediaType;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.URL;
import java.net.UnknownHostException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.ServerException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.Arrays;
import java.util.Timer;
import java.util.TimerTask;

import javax.security.auth.login.LoginException;
import javax.ws.rs.client.Client;

import lpi.dst.chat.soap.proxy.ArgumentFault;
import lpi.dst.chat.soap.proxy.ChatServer;
import lpi.dst.chat.soap.proxy.FileInfo;
import lpi.dst.chat.soap.proxy.IChatServer;
import lpi.dst.chat.soap.proxy.LoginFault;
import lpi.dst.chat.soap.proxy.Message;
import lpi.dst.chat.soap.proxy.ServerFault;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.Invocation;
import javax.ws.rs.client.SyncInvoker;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.glassfish.jersey.client.authentication.HttpAuthenticationFeature;

public class ConsoleInterp {

	static String[] partsout(String[] array, int index) {
		String[] result = new String[array.length - index];
		for (int i = index; i < (array.length); i++) {
			result[i - index] = array[i];

		}
		return result;
	}

	private static class MyTimerTask extends TimerTask {
		public void run() {
			try {
				Message ReceivedMessage = proxy.receiveMessage(sessionID);
				if (ReceivedMessage != null)
					System.out.println(
							"Incoming Message" + ReceivedMessage.getMessage() + "from" + ReceivedMessage.getSender());
				FileInfo ReceivedFile = proxy.receiveFile(sessionID);
				if (ReceivedFile != null) {
					Path path = Paths.get("D:\\Desktop", ReceivedFile.getFilename());
					Path content = Files.write(path, ReceivedFile.getFileContent(), StandardOpenOption.CREATE);
					System.out
							.println("Incoming File:" + ReceivedFile.getFilename() + "from" + ReceivedFile.getSender());
				}
			} catch (RemoteException ex) {
				// handle communication exception
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	@SuppressWarnings({ "null", "rawtypes" })
	public static void main(String[] args) throws ClassNotFoundException, UnknownHostException, IOException,
			NotBoundException, ArgumentFault, ServerFault, LoginFault {
		try {
			javax.ws.rs.client.Client client = javax.ws.rs.client.ClientBuilder.newClient();
			String[] parts;
			InputStreamReader isr = new InputStreamReader(System.in);
			BufferedReader br = new BufferedReader(isr);
			String s = null;
			Timer timeToReceiveMsg = new Timer();
			System.out.printf("Enter String%n");
			boolean isClosed = false;
			boolean isTimerStarted = false;
			while (!isClosed) {

				s = br.readLine();
				parts = s.split(" ");
				switch (parts[0]) {
				case "ping":
					String response = client.target("http://localhost:8080/chat/server/ping").get(String.class);
					if (response != null) System.out.println("Ping successfull");
					break;
				case "echo":
					response = client.target("http://localhost:8080/chat/server/echo")
					.request(MediaType.TEXT_PLAIN_TYPE)
					.post(Entity.text(String.join(" ", partsout(parts, 1))), String.class);
					System.out.println(response);
					break;
				case "login":
					UserInfo userInfo = new UserInfo();
					userInfo.setLogin("tst");
					userInfo.setPassword("tst");
					Entity userInfoEntity = Entity.entity(userInfo);
					Response responseOnLogin = client.target("http://localhost:8080/chat/server/user")
								.put(userInfoEntity, MediaType.APPLICATION_JSON_TYPE);
					if (responseOnLogin.getStatus() == Status.CREATED.getStatusCode())
						System.out.println("New user registered");
					else System.out.println("Error code"+responseOnLogin.getStatus());
					client.register(HttpAuthenticationFeature.basic(userInfo.getLogin(), userInfo.getPassword()));
					if (userInfo != null && !isTimerStarted)
						isTimerStarted = true;
					timeToReceiveMsg.schedule(new MyTimerTask(), 0, 1000);
					break;
				case "list":
					WrappedList users = client.target("http://localhost:8080/chat/server/users")
					.get(WrappedList.class);
					System.out.println("List of active users:" + users);
					break;
				/*case "msg":
					serverProxy.sendMessage(sessionID, createMessage(parts[1], String.join(" ", partsout(parts, 2))));
					break;
				case "file":
					serverProxy.sendFile(sessionID, createFileInfo(parts[1], new File(parts[2])));
					break;*/
				case "exit":
					if (client != null) {
						client.close();
						client = null;
					}
					isClosed = true;
					break;
				default:
					System.out.println("Invalid command");
					break;
				}
			}

		} catch (UnknownHostException e) {
			System.out.println("Unknown host: 0.0.0.0");
			System.exit(1);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

}
